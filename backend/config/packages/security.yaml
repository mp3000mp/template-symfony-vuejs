security:
    enable_authenticator_manager: true
    hide_user_not_found: false
    password_hashers:
        App\Entity\User:
            algorithm: auto

    providers:
        users_in_memory: { memory: null }

        db_provider:
            entity:
                class: App\Entity\User
                property: username

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api_info:
            pattern:  ^/api/info
            stateless: true

        refresh_token:
            pattern:  ^/api/token/refresh
            stateless: true

        password_forgotten:
            pattern:  ^/api/password/(init|forgotten)
            stateless: true

        login:
            pattern:  ^/api/logincheck
            stateless: true
            provider: db_provider
            user_checker: App\Security\UserChecker
            json_login:
                check_path:               /api/logincheck
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            stateless: true
            provider: db_provider
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/token/refresh,      roles: PUBLIC_ACCESS }
        - { path: ^/api/logincheck,         roles: PUBLIC_ACCESS }
        - { path: ^/api/password/init,      roles: PUBLIC_ACCESS }
        - { path: ^/api/password/forgotten, roles: PUBLIC_ACCESS }
        - { path: ^/api/info,               roles: PUBLIC_ACCESS }
#        - { path: ^/api/admin,              roles: ROLE_ADMIN }
        - { path: ^/api,                    roles: IS_AUTHENTICATED_FULLY }
